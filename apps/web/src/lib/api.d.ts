/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/healthz": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Healthz */
        get: operations["healthz_healthz_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/positions/stocks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Equities */
        get: operations["equities_positions_stocks_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stats": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Stats */
        get: operations["stats_stats_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/positions/options": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Options */
        get: operations["options_positions_options_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/rules/summary": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Rules Summary */
        get: operations["rules_summary_rules_summary_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/rules/catalog": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Rules Catalog */
        get: operations["rules_catalog_rules_catalog_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/rules/validate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Rules Validate */
        post: operations["rules_validate_rules_validate_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/rules/preview": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Rules Preview */
        post: operations["rules_preview_rules_preview_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/rules/publish": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Rules Publish */
        post: operations["rules_publish_rules_publish_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/rules/reload": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Rules Reload */
        post: operations["rules_reload_rules_reload_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** CatalogDiffModel */
        CatalogDiffModel: {
            /** Added */
            added: {
                [key: string]: unknown;
            }[];
            /** Removed */
            removed: {
                [key: string]: unknown;
            }[];
            /** Changed */
            changed: {
                [key: string]: unknown;
            }[];
        };
        /** CatalogPublishRequest */
        CatalogPublishRequest: {
            /** Catalog Text */
            catalog_text: string;
            /** Author */
            author?: string | null;
        };
        /** CatalogTextRequest */
        CatalogTextRequest: {
            /** Catalog Text */
            catalog_text: string;
        };
        /** HTTPValidationError */
        HTTPValidationError: {
            /** Detail */
            detail?: components["schemas"]["ValidationError"][];
        };
        /** RulesCatalogPreviewResponseModel */
        RulesCatalogPreviewResponseModel: {
            /** Ok */
            ok: boolean;
            /** Counters */
            counters: {
                [key: string]: number;
            };
            /** Top */
            top: {
                [key: string]: unknown;
            }[];
            /** Errors */
            errors: string[];
            diff: components["schemas"]["CatalogDiffModel"];
        };
        /** RulesCatalogPublishResponseModel */
        RulesCatalogPublishResponseModel: {
            /** Version */
            version: number;
            /** Updated At */
            updated_at: string;
            /** Updated By */
            updated_by?: string | null;
        };
        /** RulesCatalogResponseModel */
        RulesCatalogResponseModel: {
            /** Version */
            version: number;
            /** Updated At */
            updated_at: string;
            /** Updated By */
            updated_by?: string | null;
            /** Rules */
            rules: {
                [key: string]: unknown;
            }[];
        };
        /** RulesCatalogValidationResponseModel */
        RulesCatalogValidationResponseModel: {
            /** Ok */
            ok: boolean;
            /** Counters */
            counters: {
                [key: string]: number;
            };
            /** Top */
            top: {
                [key: string]: unknown;
            }[];
            /** Errors */
            errors: string[];
        };
        /** RulesSummaryCountersModel */
        RulesSummaryCountersModel: {
            /**
             * Total
             * @default 0
             */
            total: number;
            /**
             * Critical
             * @default 0
             */
            critical: number;
            /**
             * Warning
             * @default 0
             */
            warning: number;
            /**
             * Info
             * @default 0
             */
            info: number;
        };
        /** RulesSummaryResponseModel */
        RulesSummaryResponseModel: {
            /** As Of */
            as_of: string;
            counters: components["schemas"]["RulesSummaryCountersModel"];
            /** Top */
            top: components["schemas"]["RulesSummaryTopModel"][];
            /** Focus Symbols */
            focus_symbols: string[];
            /** Rules Total */
            rules_total: number;
            /** Evaluation Ms */
            evaluation_ms: number;
        };
        /** RulesSummaryTopModel */
        RulesSummaryTopModel: {
            /** Id */
            id: string;
            /** Rule */
            rule: string;
            /** Severity */
            severity: string;
            /** Subject */
            subject: string;
            /** Symbol */
            symbol?: string | null;
            /** Occurred At */
            occurred_at: string;
            /** Description */
            description?: string | null;
            /** Status */
            status?: string | null;
        };
        /** ValidationError */
        ValidationError: {
            /** Location */
            loc: (string | number)[];
            /** Message */
            msg: string;
            /** Error Type */
            type: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    healthz_healthz_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: unknown;
                    };
                };
            };
        };
    };
    equities_positions_stocks_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: unknown;
                    }[];
                };
            };
        };
    };
    stats_stats_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: unknown;
                    };
                };
            };
        };
    };
    options_positions_options_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: unknown;
                    };
                };
            };
        };
    };
    rules_summary_rules_summary_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RulesSummaryResponseModel"];
                };
            };
        };
    };
    rules_catalog_rules_catalog_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RulesCatalogResponseModel"];
                };
            };
        };
    };
    rules_validate_rules_validate_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CatalogTextRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RulesCatalogValidationResponseModel"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    rules_preview_rules_preview_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CatalogTextRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RulesCatalogPreviewResponseModel"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    rules_publish_rules_publish_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CatalogPublishRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RulesCatalogPublishResponseModel"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    rules_reload_rules_reload_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RulesCatalogResponseModel"];
                };
            };
        };
    };
}
